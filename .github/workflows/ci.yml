name: CI

# TODO:
# - Run unit tests for all platforms (Blocked by XCode build file creation.)
# - Reduce duplicate code (Blocking: https://github.community/t5/GitHub-Actions/Support-for-YAML-anchors/td-p/30336)
# - Investigate using scoop as package manager on windows
# - Cache build files on all systems (Looking at you OSX)
# - Cache development libraries on windows
# - Run windows builds as matrix with different mingw versions
# - Construct even more intelligent workflows
#    e.g.
#      data/* -> use "latest" build for triggering branch, only run parse and/or acceptance tests
#      source/* -> build new binary, run all tests, cache binary
#      PR opened -> upload artifact ZIPs to PR as comment, and edit/replace as new commits come in
# - Windows: Allow programmers to use their own copy of development libs without hacking a temporary URL in the windows step

on:
  push:
    # Run for pushes to master or a release branch, e.g. a PR was merged ...
    branches:
      - master
      - releases/v[0-9]+.[0-9]+.[0-9]+
    # ... and only when we've possibly changed how the game will function.
    paths:
    - 'source/**'
    - 'data/**'
    - 'tests/**'
    - '.github/workflows/**'
    - keys.txt
    - SConstruct
    - .codespell.exclude
  pull_request:
    # Run for any push to any pull request, if it modifies source code or game text.
    types: [opened, synchronize]
    paths:
    - 'source/**'
    - 'data/**'
    - 'tests/**'
    - '.github/workflows/**'
    - keys.txt
    - SConstruct
    - .codespell.exclude


concurrency:
  group: ${{ github.ref }}-${{ github.workflow }}-${{ github.event_name }}
  cancel-in-progress: true

jobs:
  # Figure out what changed, so other jobs in this file can conditionally execute.
  changed:
    uses: ./.github/workflows/compute-changes.yml


  build_ubuntu:
    name: Ubuntu
    needs: changed
    if: ${{ needs.changed.outputs.game_code == 'true' || needs.changed.outputs.unit_tests == 'true' || needs.changed.outputs.integration_tests == 'true' || needs.changed.outputs.cmake_files == 'true' }}
    runs-on: ubuntu-${{ matrix.os }}
    strategy:
      matrix:
        os: [20.04, 22.04]
        opengl: [GL, GLES]
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
    - uses: actions/checkout@v3
    - name: Install development dependencies
      run: |
        sudo rm /etc/apt/sources.list.d/* && sudo dpkg --clear-avail # Speed up installation and get rid of unwanted lists
        sudo apt-get update
        sudo apt-get install -y --no-install-recommends libxmu-dev libxi-dev libgl-dev libglu1-mesa-dev libgles2-mesa-dev libwayland-dev libxkbcommon-dev libegl1-mesa-dev libosmesa6 mesa-utils libglvnd-dev
    - name: Setup sccache
      uses: ./.github/sccache
    - uses: lukka/get-cmake@latest
    - uses: lukka/run-vcpkg@v10
      with:
        vcpkgGitCommitId: '163fe7bd3d67c41200617caaa245b5ba2ba854e6'
    - uses: lukka/run-cmake@v10
      with:
        configurePreset: ${{ matrix.opengl == 'GL' && 'linux-ci' || 'linux-gles-ci' }}
        buildPreset: ${{ matrix.opengl == 'GL' && 'linux-ci' || 'linux-gles-ci' }}
        testPreset: ${{ matrix.opengl == 'GL' && 'linux-ci' || 'linux-gles-ci' }}
    - name: Run Benchmarks
      run: ctest --preset ${{ matrix.opengl == 'GL' && 'linux-ci-benchmark' || 'linux-gles-ci-benchmark' }}
    - name: Prevent saving cache on failure
      run: |
        echo "RUNVCPKG_NO_CACHE=1" >> $GITHUB_ENV
      if: ${{ failure() || cancelled() }}
      shell: bash


  build_windows:
    name: Windows
    needs: changed
    if: ${{ needs.changed.outputs.game_code == 'true' || needs.changed.outputs.unit_tests == 'true' || needs.changed.outputs.cmake_files == 'true' }}
    runs-on: windows-2022
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
    - uses: actions/checkout@v3
    - name: Setup sccache
      uses: ./.github/sccache
    - uses: lukka/get-cmake@latest
    - uses: lukka/run-vcpkg@v10
      with:
        vcpkgGitCommitId: '163fe7bd3d67c41200617caaa245b5ba2ba854e6'
    - uses: lukka/run-cmake@v10
      with:
        configurePreset: 'mingw-ci'
        buildPreset: 'mingw-ci'
        testPreset: 'mingw-ci'
    - name: Run Benchmarks
      run: ctest --preset mingw-ci-benchmark
    - name: Prevent saving cache on failure
      run: |
        echo "RUNVCPKG_NO_CACHE=1" >> $GITHUB_ENV
      if: ${{ failure() || cancelled() }}
      shell: bash
    - name: Upload game
      uses: actions/upload-artifact@v3
      with:
        name: binary-windows
        path: |
          ./build/ci/Endless Sky.exe
          ./build/ci/*.dll


  build_windows_clang:
    name: Windows Clang
    needs: changed
    if: ${{ needs.changed.outputs.game_code == 'true' || needs.changed.outputs.unit_tests == 'true' || needs.changed.outputs.cmake_files == 'true' }}
    runs-on: windows-2022
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
    - uses: actions/checkout@v3
    - name: Setup sccache
      uses: ./.github/sccache
    - uses: lukka/get-cmake@latest
    - uses: lukka/run-vcpkg@v10
      with:
        vcpkgGitCommitId: '163fe7bd3d67c41200617caaa245b5ba2ba854e6'
        prependedCacheKey: vs-x64
    - uses: lukka/run-cmake@v10
      with:
        configurePreset: 'clang-cl-ci'
        buildPreset: 'clang-cl-ci'
        testPreset: 'clang-cl-ci'
    - name: Run Benchmarks
      run: ctest --preset clang-cl-ci-benchmark
    - name: Prevent saving cache on failure
      run: |
        echo "RUNVCPKG_NO_CACHE=1" >> $GITHUB_ENV
      if: ${{ failure() || cancelled() }}
      shell: bash


  build_macos:
    name: MacOS
    needs: changed
    if: ${{ needs.changed.outputs.game_code == 'true' || needs.changed.outputs.unit_tests == 'true' || needs.changed.outputs.cmake_files == 'true' }}
    runs-on: macos-12
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
    - uses: actions/checkout@v3
    - name: Setup sccache
      uses: ./.github/sccache
    - uses: lukka/get-cmake@latest
    - uses: lukka/run-vcpkg@v10
      with:
        vcpkgGitCommitId: '163fe7bd3d67c41200617caaa245b5ba2ba854e6'
    - uses: lukka/run-cmake@v10
      with:
        configurePreset: 'macos-ci'
        buildPreset: 'macos-ci'
        testPreset: 'macos-ci'
    - name: Run Benchmarks
      run: ctest --preset macos-ci-benchmark
    - name: Prevent saving cache on failure
      run: |
        echo "RUNVCPKG_NO_CACHE=1" >> $GITHUB_ENV
      if: ${{ failure() || cancelled() }}
      shell: bash


  test-parse:
    needs: [changed, build_windows]
    name: Data Files
    if: ${{ (needs.changed.outputs.game_code == 'true' || needs.changed.outputs.cmake == 'true' || needs.changed.outputs.data == 'true' || needs.changed.outputs.parse_script == 'true') && always() }}
    runs-on: windows-2022
    env:
      CONTINUOUS: EndlessSky-win64-continuous.zip
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
    - uses: actions/checkout@v3
    # If no code changes occurred then we can download the latest continuous.
    - name: Download latest continuous
      if: ${{ needs.changed.outputs.game_code != 'true' && needs.changed.outputs.cmake != 'true' }}
      run: gh release download -R ${{ github.repository }} continuous -p ${{ env.CONTINUOUS }}
    - name: Extract and prepare continuous
      if: ${{ needs.changed.outputs.game_code != 'true' && needs.changed.outputs.cmake != 'true' }}
      run: |
        Expand-Archive ${{ env.CONTINUOUS }} -DestinationPath continuous -Force
        COPY '.\continuous\Endless Sky.exe' .
        COPY '.\continuous\*.dll' .
    # Otherwise download the binary from CI.
    - name: Download game binary from CI
      if: ${{ needs.changed.outputs.game_code == 'true' || needs.changed.outputs.cmake == 'true' }}
      uses: actions/download-artifact@v3
      with:
        name: binary-windows
    - name: Parse Datafiles
      run: .\utils\test_parse.ps1 'Endless Sky.exe'
    - name: Parse Integration Test Data
      run: .\utils\test_parse.ps1 'Endless Sky.exe' tests/integration/config


  spellcheck:
    name: Spellcheck
    needs: [changed]
    if: ${{ needs.changed.outputs.data == 'true' || needs.changed.outputs.codespell == 'true' }}
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
      with:
        ref: ${{ github.event.pull_request.head.sha }}
    - uses: codespell-project/actions-codespell@master
      with:
        builtin: clear,en-GB_to_en-US
        path: data/
        exclude_file: .codespell.exclude


  style-check:
    name: Style Check
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - uses: editorconfig-checker/action-editorconfig-checker@main
    - run: editorconfig-checker


  check-coding-style:
    name: Code Style Check
    needs: changed
    if: ${{ needs.changed.outputs.game_code == 'true' || needs.changed.outputs.unit_tests == 'true' }}
    runs-on: ubuntu-latest
    steps:
    - name: checkout
      uses: actions/checkout@v3
    - name: set up python environment
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'
    - name: install python packages
      run: pip install regex
    - name: Execute style checker
      run: python ./utils/check_code_style.py
