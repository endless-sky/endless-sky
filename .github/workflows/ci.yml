name: Build & Parse

# TODO:
# - Reduce duplicate code (Blocking: https://github.community/t5/GitHub-Actions/Support-for-YAML-anchors/td-p/30336)
# - Investigate using scoop as package manager on windows
# - MacOS artifact uploads are still slow (https://github.com/actions/upload-artifact/issues/69)
# - Cache build files on all systems (Looking at you OSX)
# - Cache development libraries on windows
# - Run windows builds as matrix with different mingw versions
# - Construct more intelligent workflows
#    e.g.
#      data/* -> use "latest" build for triggering branch, only run parse and/or acceptance tests
#      source/* -> build new binary, run all tests, cache binary
#      PR opened -> upload artifact ZIPs to PR as comment, and edit/replace as new commits come in
# - Windows: Allow programmers to use their own copy of development libs without hacking a temporary URL in the windows step

on:
  push:
    paths:
    - 'source/**'
    - 'data/**'
    - 'tests/**'
    - 'EndlessSky.xcodeproj/**'
    - 'XCode/**'
    - '.github/workflows/**'
    - keys.txt
    - SConstruct
    - .winmake
  pull_request:
    paths:
    - 'source/**'
    - 'data/**'
    - 'tests/**'
    - 'EndlessSky.xcodeproj/**'
    - 'XCode/**'
    - '.github/workflows/**'
    - keys.txt
    - SConstruct
    - .winmake


jobs:

  build_ubuntu:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, ubuntu-16.04]
    env:
        CCACHE_DIR: ./ccache/
        CXX: ccache g++
        ARTIFACT: endless-sky
    steps:
    - uses: actions/checkout@v2
    - name: Restore cached artifact
      id: cache-artifact
      uses: actions/cache@v2
      with: 
        path: ${{ env.ARTIFACT }}
        key: ${{ matrix.os }}-artifact-${{ hashFiles('.github/workflows/**') }}-${{ hashFiles('source/**') }}-${{ hashFiles('SConstruct') }} # Any of these files will trigger a rebuild
    - name: Install dependencies
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      run: |
        sudo rm /etc/apt/sources.list.d/* && sudo dpkg --clear-avail # Speed up installation and get rid of unwanted lists
        sudo apt-get update
        sudo apt-get install -y --no-install-recommends libsdl2-dev libpng-dev libjpeg-turbo8-dev libopenal-dev libmad0-dev libglew-dev libgl1-mesa-dev libegl1-mesa-dev libgles2-mesa-dev scons ccache
    - name: Cache ccache
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      uses: actions/cache@v2
      with:
        path: ${{ env.CCACHE_DIR }}
        key: ${{ matrix.os }}-ccache-${{ github.repository }}-${{ github.ref }}-${{ github.sha }}
        restore-keys: | 
          ${{ matrix.os }}-ccache-${{ github.repository }}-${{ github.ref }}-
          ${{ matrix.os }}-ccache-${{ github.repository }}-
          ${{ matrix.os }}-ccache-
    - name: Compile
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      run: scons -j $(nproc);
    - name: Upload artifact
      uses: actions/upload-artifact@v2
      with:
        name: binary-${{ matrix.os }} 
        path: ${{ env.ARTIFACT }}


  build_windows:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest]
    env:
        SCCACHE_DIR: ./sccache/
        DIR_MINGW64: C:\ProgramData\chocolatey\lib\mingw\tools\install\mingw64\x86_64-w64-mingw32
        DIR_ESLIB: .\dev64
        CXX: sccache g++
        ARTIFACT: EndlessSky.exe 
    steps:
    - uses: actions/checkout@v2
    - name: Restore cached artifact
      id: cache-artifact
      uses: actions/cache@v2
      with:
        path: ${{ env.ARTIFACT }}
        key: ${{ matrix.os }}-artifacts-${{ hashFiles('.github/workflows/**') }}-${{ hashFiles('source/**') }}-${{ hashFiles('.winmake') }} # Any of these files will trigger a rebuild
    - name: Install dependencies
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      run: choco install sccache
    - name: Fetch development libraries
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      run: |
        Invoke-WebRequest https://endless-sky.github.io/win64-dev.zip -OutFile win64-dev.zip
        Expand-Archive win64-dev.zip -DestinationPath . -Force
        Remove-Item win64-dev.zip
    - name: Cache sccache
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      uses: actions/cache@v2
      with:
        path: ${{ env.SCCACHE_DIR }}
        key: ${{ matrix.os }}-sccache-${{ github.repository }}-${{ github.ref }}-${{ github.sha }}
        restore-keys: |
          ${{ matrix.os }}-sccache-${{ github.repository }}-${{ github.ref }}-
          ${{ matrix.os }}-sccache-${{ github.repository }}-
          ${{ matrix.os }}-sccache
    - name: Compile
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      run: |
        make -e -f .winmake -j ($(Get-CIMInstance -Class 'CIM_Processor').NumberOfLogicalProcessors)
        COPY .\bin\pkgd\EndlessSky.exe EndlessSky.exe
        COPY ".\dev64\bin\*.dll" .
        COPY C:\ProgramData\chocolatey\lib\mingw\tools\install\mingw64\x86_64-w64-mingw32\lib\libgcc_s_seh-1.dll .
        COPY C:\ProgramData\chocolatey\lib\mingw\tools\install\mingw64\x86_64-w64-mingw32\lib\libstdc++-6.dll .
        COPY C:\ProgramData\chocolatey\lib\mingw\tools\install\mingw64\x86_64-w64-mingw32\lib\libwinpthread-1.dll .
    - name: Upload artifact
      uses: actions/upload-artifact@v2
      with:
        name: binary-${{ matrix.os }}
        path: ${{ env.ARTIFACT }}


  build_macos:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest]
    env:
      ARTIFACT: /tmp/EndlessSky.dst/Applications/
    steps:
    - uses: actions/checkout@v2
    - name: Restore cached artifact
      id: cache-artifact
      uses: actions/cache@v2
      with: 
        path: ${{ env.ARTIFACT }}
        key: ${{ matrix.os }}-artifacts-${{ hashFiles('.github/workflows/**') }}-${{ hashFiles('source/**') }}-${{ hashFiles('EndlessSky.xcodeproj/**') }} # Any of these files will trigger a rebuild
    - name: Install dependencies
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      run: |
        brew update
        brew install libmad libpng jpeg-turbo sdl2
    - name: Compile
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      run: xcodebuild -configuration "Release" -jobs $(sysctl -n hw.logicalcpu) -quiet install
    - name: Upload artifact
      uses: actions/upload-artifact@v2
      with:
        name: app-${{ matrix.os }}
        path: ${{ env.ARTIFACT }}


  # This section is for tests on ubuntu 16 (and on ubuntu 20).
  # The tests with Xvfb in this section work fine on ubuntu 16 and on Ubuntu 20, but they don't work on Ubuntu 18.
  autotest_ubuntu16:
    runs-on: ubuntu-16.04
    needs: build_ubuntu
    steps:
    - uses: actions/checkout@v2
    - name: Install dependencies
      run: |
        sudo rm /etc/apt/sources.list.d/* && sudo dpkg --clear-avail # Speed up installation and get rid of unwanted lists
        sudo apt-get update
        sudo apt-get install -y --no-install-recommends libsdl2-dev libpng-dev libjpeg-turbo8-dev libopenal-dev libmad0-dev libglew-dev libgl1-mesa-dev libegl1-mesa-dev libgles2-mesa-dev
        sudo apt-get install -y --no-install-recommends mesa-utils libmad0 libegl1-mesa libgles2-mesa libgl1-mesa-dri libgl1-mesa-glx libosmesa6 xvfb
    - name: Download artifact
      uses: actions/download-artifact@v1.0.0
      with:
        name: binary-ubuntu-16.04
        path: .
    - name: Execute available testcases
      run: |
        chmod +x endless-sky
        ./tests/run_tests_headless.sh


  parsetest_ubuntu:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, ubuntu-16.04]
    needs: build_ubuntu
    steps:
    - uses: actions/checkout@v2
    - name: Install dependencies
      run: |
        sudo rm /etc/apt/sources.list.d/* && sudo dpkg --clear-avail # Speed up installation and get rid of unwanted lists
        sudo apt-get update
        sudo apt-get install -y --no-install-recommends libsdl2-dev libpng-dev libjpeg-turbo8-dev libopenal-dev libmad0-dev libglew-dev libgl1-mesa-dev libegl1-mesa-dev libgles2-mesa-dev scons ccache
    - name: Download artifact
      uses: actions/download-artifact@v2
      with:
        name: binary-${{ matrix.os }}
    - name: Execute test_parse
      run: |
        chmod +x endless-sky
        ./tests/test_parse.sh ./endless-sky


  parsetest_windows:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest]
    needs: build_windows
    steps:
    - uses: actions/checkout@v2
    - name: Fetch development libraries
      run: |
        Invoke-WebRequest https://endless-sky.github.io/win64-dev.zip -OutFile win64-dev.zip
        Expand-Archive win64-dev.zip -DestinationPath . -Force
        Remove-Item win64-dev.zip
        COPY ".\dev64\bin\*.dll" .
        COPY C:\ProgramData\chocolatey\lib\mingw\tools\install\mingw64\x86_64-w64-mingw32\lib\libgcc_s_seh-1.dll .
        COPY C:\ProgramData\chocolatey\lib\mingw\tools\install\mingw64\x86_64-w64-mingw32\lib\libstdc++-6.dll .
        COPY C:\ProgramData\chocolatey\lib\mingw\tools\install\mingw64\x86_64-w64-mingw32\lib\libwinpthread-1.dll .
    - name: Download artifact
      uses: actions/download-artifact@v2
      with:
        name: binary-${{ matrix.os }}
    - name: Execute test_parse
      run: .\tests\test_parse.ps1 EndlessSky.exe


  parsetest_macos:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest]
    needs: build_macos
    steps:
    - uses: actions/checkout@v2
    - name: Install dependencies
      run: |
        brew update
        brew install libmad libpng jpeg-turbo sdl2
    - name: Download artifact
      uses: actions/download-artifact@v2
      with:
        name: app-${{ matrix.os }}
    - name: Execute test_parse
      run: |
        chmod +x "./Endless Sky.app/Contents/MacOS/Endless Sky"
        ./tests/test_parse.sh "./Endless Sky.app/Contents/MacOS/Endless Sky"
