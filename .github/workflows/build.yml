name: Build & Parse
# TODO:
# 1. export artifact (via actions/cache).
# 2. Move tests to own job that depends on the build task (do we test all binaries, or just one?)
# 3. Construct more intelligent workflows
#    e.g.
#      data/* -> use "latest" build for triggering branch, only run parse and/or acceptance tests
#      source/* -> build new binary, run all tests, cache binary
#      PR opened -> upload artifact ZIPs to PR as comment, and edit/replace as new commits come in
on:
  push:
    paths:
    - 'source/**'
    - 'data/**'
    - 'tests/**'
    - 'EndlessSky.xcodeproj/**'
    - 'XCode/**'
    - '.github/workflows/**'
    - keys.txt
    - SConstruct
  pull_request:
    paths:
    - 'source/**'
    - 'data/**'
    - 'tests/**'
    - 'EndlessSky.xcodeproj/**'
    - 'XCode/**'
    - '.github/workflows/**'
    - keys.txt
    - SConstruct


jobs:

  build:

    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, ubuntu-16.04, macos-latest, windows-latest, windows-2016]
    
    steps:
    - uses: actions/checkout@v2
    - name: Install Linux dependencies
      if: contains(matrix.os, 'ubuntu')
      run: |
        sudo apt-get update
        sudo apt-get install libsdl2-dev libpng-dev libjpeg-turbo8-dev libopenal-dev libmad0-dev libglew-dev libgl1-mesa-dev libegl1-mesa-dev libgles2-mesa-dev scons
    - name: Install MacOS dependencies
      if: contains(matrix.os, 'macos')
      run: |
        brew update
        brew install libmad libpng jpeg-turbo sdl2
    - name: Debugging with tmate
      if: contains(matrix.os, 'windows')
      run: |
        where.exe gcc
        where.exe make
        where.exe mingw32-make
        where.exe g++
      shell: powershell
    - name: Fetch development libraries (Windows)
      if: contains(matrix.os, 'windows')
      run: | 
        Invoke-WebRequest https://endless-sky.github.io/win64-dev.zip -OutFile win64-dev.zip
        Expand-Archive win64-dev.zip -DestinationPath . -Force
        Remove-Item win64-dev.zip
      shell: powershell
    - name: adjust .winmake (Windows)
      if: contains(matrix.os, 'windows')
      run: |
        (Get-Content .winmake) -replace '^DIR_ESLIB \?=.*$', 'DIR_ESLIB ?= .\dev64' |  Out-File .winmake
        (Get-Content .winmake) -replace '^DIR_MINGW64 \?=.*$', 'DIR_MINGW64 ?= C:\ProgramData\chocolatey\lib\mingw\tools\install\mingw64\x86_64-w64-mingw32' | Out-File -Encoding UTF8 .winmake
        type .winmake
      shell: powershell
    - name: Compile (Linux)
      if: contains(matrix.os, 'ubuntu')
      run: |
        scons -j $(nproc);
        echo "::set-env name=ES_PATH::./endless-sky"
    - name: Compile (OSX)
      if: contains(matrix.os, 'macos')
      run: |
        xcodebuild -configuration "Release" -jobs $(sysctl -n hw.logicalcpu) install;
        echo "::set-env name=ES_PATH::/tmp/EndlessSky.dst/Applications/Endless Sky.app/Contents/MacOS/Endless Sky"
        echo "Completed macOS build";
    - name: Compile (Windows)
      if: contains(matrix.os, 'windows')
      run: |
        make -f .winmake -j ($(Get-CIMInstance -Class 'CIM_Processor').NumberOfLogicalProcessors)
        COPY .\bin\pkgd\EndlessSky.exe EndlessSky.exe
        COPY ".\dev64\bin\*.dll" .
        COPY C:\ProgramData\chocolatey\lib\mingw\tools\install\mingw64\x86_64-w64-mingw32\lib\libgcc_s_seh-1.dll .
        COPY C:\ProgramData\chocolatey\lib\mingw\tools\install\mingw64\x86_64-w64-mingw32\lib\libstdc++-6.dll .
        COPY C:\ProgramData\chocolatey\lib\mingw\tools\install\mingw64\x86_64-w64-mingw32\lib\libwinpthread-1.dll .
      shell: powershell
    - name: Execute test_parse (Linux/OSX)
      if: contains(matrix.os, 'ubuntu') || contains(matrix.os, 'macos')
      run: ./tests/test_parse.sh "${ES_PATH}"
    - name: Execute test_parse (Windows)
      if: contains(matrix.os, 'windows')
      run: .\tests\test_parse.ps1 'EndlessSky.exe'
      shell: powershell
