name: Release CD

on:
  workflow_dispatch:
    inputs:
      release_version:
        required: true
        type: string

permissions:
  contents: read
  actions: read

jobs:
  release_appimage_x64:
    name: AppImage x64
    runs-on: ubuntu-22.04
    env:
      ARCH: x86_64
      OUTPUT: Endless_Sky-${{ inputs.release_version  }}-x86_64.AppImage
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - uses: actions/checkout@v4
        with:
          show-progress: false
          fetch-depth: '10'
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends libxmu-dev libxi-dev libgl-dev libglu1-mesa-dev libgles2-mesa-dev libminizip-dev libwayland-dev libxkbcommon-dev libegl1-mesa-dev libfuse2
      - name: Find cache keys
        run: |
          echo 'RESTORE_KEYS<<EOF' > restore_keys.txt
          git log --pretty=format:'${{ runner.os }}-cd-%H' -n 10 | tail -n+2 >> restore_keys.txt
          echo -e '\nEOF' >> restore_keys.txt
          cat restore_keys.txt >> "$GITHUB_ENV"
      - name: Setup ccache
        uses: hendrikmuhs/ccache-action@v1
        with:
          save: 'false'
          restore-keys: ${{ env.RESTORE_KEYS }}
          append-timestamp: 'false'
      - name: Adjust version strings
        run: ./utils/cd_update_versions.sh
      - name: Setup vcpkg cache
        uses: TAServers/vcpkg-cache@v3
        id: vcpkg-cache
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      - uses: lukka/get-cmake@latest
      - uses: lukka/run-vcpkg@v11
        with:
          vcpkgGitCommitId: '89dc8be6dbcf18482a5a1bf86a2f4615c939b0fb'
      - name: Run CMake
        run: |
          cmake --preset linux-release
          cmake --build build --preset linux-ci-release
        env:
          VCPKG_BINARY_SOURCES: "clear;files,${{ steps.vcpkg-cache.outputs.path }},readwrite"
      - name: Package Application
        run: ./utils/build_appimage.sh build/release
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.OUTPUT }}
          path: ${{ env.OUTPUT }}


  release_windows_x64:
    name: Windows x64
    runs-on: windows-2025
    env:
      OUTPUT: EndlessSky-win64-${{ inputs.release_version }}.zip
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - uses: actions/checkout@v4
        with:
          show-progress: false
          fetch-depth: '10'
      - name: Find cache keys
        run: |
          echo 'RESTORE_KEYS<<EOF' > restore_keys.txt
          git log --pretty=format:'${{ runner.os }}-cd-%H' -n 10 | tail -n+2 >> restore_keys.txt
          echo -e '\nEOF' >> restore_keys.txt
          cat restore_keys.txt >> "$GITHUB_ENV"
        shell: bash
      - name: Setup ccache
        uses: hendrikmuhs/ccache-action@v1
        with:
          save: 'false'
          restore-keys: ${{ env.RESTORE_KEYS }}
          append-timestamp: 'false'
      - name: Adjust version strings
        run: ./utils/cd_update_versions.sh
      - name: Setup vcpkg cache
        uses: TAServers/vcpkg-cache@v3
        id: vcpkg-cache
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      - uses: lukka/get-cmake@latest
      - uses: lukka/run-vcpkg@v11
        with:
          vcpkgGitCommitId: '89dc8be6dbcf18482a5a1bf86a2f4615c939b0fb'
      - name: Run CMake
        run: |
          cmake --preset mingw-release
          cmake --build build --preset mingw-ci-release
        env:
          VCPKG_BINARY_SOURCES: "clear;files,${{ steps.vcpkg-cache.outputs.path }},readwrite"
      - name: Package Application
        run: |
          cmake --install build/release
          7z a ${{ env.OUTPUT }} "./install/release/*"
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.OUTPUT }}
          path: ${{ env.OUTPUT }}
      - name: Upload Steam Depot
        uses: actions/upload-artifact@v4
        with:
          name: steam-win64-depot
          path: |
            ./install/release/Endless Sky.exe
            ./install/release/*.dll


  release_windows_x86:
    name: Windows x86
    runs-on: windows-2025
    env:
      OUTPUT: EndlessSky-win32-${{ inputs.release_version }}.zip
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - uses: actions/checkout@v4
        with:
          show-progress: false
      - name: Add Mingw to PATH
        run: |
          echo (Join-Path C: mingw32 bin) >> $env:GITHUB_PATH
      - name: Setup vcpkg cache
        uses: TAServers/vcpkg-cache@v3
        id: vcpkg-cache
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      - uses: lukka/get-cmake@latest
      - uses: lukka/run-vcpkg@v11
        with:
          vcpkgGitCommitId: '89dc8be6dbcf18482a5a1bf86a2f4615c939b0fb'
      - name: Run CMake
        run: |
          cmake --preset mingw32-release
          cmake --build build --preset mingw32-ci-release
        env:
          VCPKG_BINARY_SOURCES: "clear;files,${{ steps.vcpkg-cache.outputs.path }},readwrite"
      - name: Package Application
        run: |
          cmake --install build/release
          7z a ${{ env.OUTPUT }} "./install/release/*"
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.OUTPUT }}
          path: ${{ env.OUTPUT }}
      - name: Upload Steam Depot
        uses: actions/upload-artifact@v4
        with:
          name: steam-win32-depot
          path: |
            ./install/release/Endless Sky.exe
            ./install/release/*.dll


  release_macos_x64:
    name: MacOS x64
    runs-on: macos-13
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - uses: actions/checkout@v4
        with:
          show-progress: false
          fetch-depth: '10'
      - name: Find cache keys
        run: |
          echo 'RESTORE_KEYS<<EOF' > restore_keys.txt
          git log --pretty=format:'${{ runner.os }}-cd-%H' -n 10 | tail -n+2 >> restore_keys.txt
          echo -e '\nEOF' >> restore_keys.txt
          cat restore_keys.txt >> "$GITHUB_ENV"
      - name: Setup ccache
        uses: hendrikmuhs/ccache-action@v1
        with:
          save: 'false'
          restore-keys: ${{ env.RESTORE_KEYS }}
          append-timestamp: 'false'
      - name: Adjust version strings
        run: ./utils/cd_update_versions.sh
      - name: Setup vcpkg cache
        uses: TAServers/vcpkg-cache@v3
        id: vcpkg-cache
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      - uses: lukka/get-cmake@latest
      - uses: lukka/run-vcpkg@v11
        with:
          vcpkgGitCommitId: '89dc8be6dbcf18482a5a1bf86a2f4615c939b0fb'
      - name: Run CMake
        run: |
          cmake --preset macos-release
          cmake --build build --preset macos-ci-release
        env:
          VCPKG_BINARY_SOURCES: "clear;files,${{ steps.vcpkg-cache.outputs.path }},readwrite"
      - name: Zip artifact
        run: 7z a macos-artifact-x64.zip "build/release/Endless Sky.app"
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: macos-artifact-x64
          path: macos-artifact-x64.zip


  release_macos_arm:
    name: MacOS ARM
    runs-on: macos-13
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - uses: actions/checkout@v4
        with:
          show-progress: false
          fetch-depth: '10'
      - name: Find cache keys
        run: |
          echo 'RESTORE_KEYS<<EOF' > restore_keys.txt
          git log --pretty=format:'${{ runner.os }}-arm-ci-%H' -n 10 | tail -n+2 >> restore_keys.txt
          echo -e '\nEOF' >> restore_keys.txt
          cat restore_keys.txt >> "$GITHUB_ENV"
      - name: Setup ccache
        uses: hendrikmuhs/ccache-action@v1
        with:
          save: 'false'
          restore-keys: ${{ env.RESTORE_KEYS }}
          append-timestamp: 'false'
      - name: Adjust version strings
        run: ./utils/cd_update_versions.sh
      - name: Setup vcpkg cache
        uses: TAServers/vcpkg-cache@v3
        id: vcpkg-cache
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      - uses: lukka/get-cmake@latest
      - uses: lukka/run-vcpkg@v11
        with:
          vcpkgGitCommitId: '89dc8be6dbcf18482a5a1bf86a2f4615c939b0fb'
      - name: Run CMake
        run: |
          cmake --preset macos-arm-release
          cmake --build build --preset macos-arm-ci-release
        env:
          VCPKG_BINARY_SOURCES: "clear;files,${{ steps.vcpkg-cache.outputs.path }},readwrite"
      - name: Zip artiface
        run: 7z a macos-artifact-arm "build/release/Endless Sky.app"
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: macos-artifact-arm
          path: macos-artifact-arm.zip


  release_macos:
    name: MacOS Universal
    runs-on: macos-13
    needs: [release_macos_arm, release_macos_x64]
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      OUTPUT: Endless-Sky-${{ inputs.release_version }}
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: macos-artifact-x64
          path: x64/macos-artifact-x64.zip
      - name: Extract x64 artiface
        run: |
          cd x64
          7z x macos-artiface-x64.zip
      - uses: actions/download-artifact@v4
        with:
          name: macos-artifact-arm
          path: arm/Endless Sky.app
      - name: Extract arm artifact
        run: |
          cd arm
          7z x macos-artifact-arm.zip
      - name: Create universal binary
        run: |
          cp -r "arm/Endless Sky.app" "Endless Sky.app"
          lipo -create -output "Endless Sky.app/Contents/MacOS/Endless Sky" "arm/Endless Sky.app/Contents/MacOS/Endless Sky" "x64/Endless Sky.app/Contents/MacOS/Endless Sky"
          for lib in "Endless Sky.app/Contents/Frameworks/"*; do lipo -create -output "$lib" "arm/Endless Sky.app/Contents/Frameworks/$(basename "$lib")" "x64/Endless Sky.app/Contents/Frameworks/$(basename "$lib")"; done
      - name: Package Application
        run: |
          mkdir "${{ env.OUTPUT }}"
          cp -r "Endless Sky.app" "${{ env.OUTPUT }}"
          ln -s /Applications "${{ env.OUTPUT }}"
          until hdiutil create -ov -fs HFS+ -format UDZO -imagekey zlib-level=9 -srcfolder "${{ env.OUTPUT }}" "${{ github.workspace }}/${{ env.OUTPUT }}.dmg"; do echo "hdiutil create failed, retrying..."; done
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.OUTPUT }}.dmg
          path: ${{ env.OUTPUT }}.dmg
      - name: Prepare Steam Depot
        run: |
          mv "Endless Sky.app/Contents/Resources/endless-sky.icns" .
          rm -rf "Endless Sky.app/Contents/Resources"
          mkdir "Endless Sky.app/Contents/Resources"
          mv endless-sky.icns "Endless Sky.app/Contents/Resources"
          mkdir depot/
          mv "Endless Sky.app/" depot/
      - name: Upload Steam Depot
        uses: actions/upload-artifact@v4
        with:
          name: steam-macos-depot
          path: depot

  release_steam_linux:
    name: Steam Linux
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        show-progress: false
    - name: Build Endless Sky
      run: |
        cd steam
        docker compose run steam-x64
    - name: Prepare binary
      run: cp build/steam-x64/endless-sky .
    - name: Upload Steam Depot
      uses: actions/upload-artifact@v4
      with:
        name: steam-linux64-depot
        path: endless-sky


  steam_data:
    name: Steam Data Depot
    runs-on: ubuntu-latest
    env:
      data: steam-data-depot
    steps:
    - uses: actions/checkout@v4
      with:
        show-progress: false
    - name: Upload Steam Data Depot
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.data }}
        path: |
          changelog
          copyright
          credits.txt
          icon.png
          keys.txt
          license.txt
          data/
          images/
          shaders/
          sounds/
