#include "catch.hpp"

// Include only the tested class's header.
#include "../../source/file-being-tested.h"

// ... and any system includes needed for the test file.
#include <string>

// We do not want tests, variables, classes, fixtures, etc. that are needed to test this class to be
// accessible to other tests. Thus, all test code is to be wrapped in an anonymous namespace.
namespace { // test namespace

// #region mock data

// Often we cannot test a class using just the class and primitives such as ints or doubles - we need
// classes, classes that expose a particular interface, or even calls to third party libraries like
// SDL. For unit tests, we do _NOT_ want to actually make these calls to other implementations, so we
// declare file-local mocks and/or stubs that allow us to inspect or control these calls, for the sake
// of testing our particular implementation.

// Unfortunately, the current architecture & implementation of Endless Sky's code does not support
// dependency injection, with which we could provide mocked implementations to the actual game code.
// Such capability would enable assertions of the behavior of the code under test when other code units
// behave in prescribed manners. Effectively, we are not able to write unit tests for code that is
// coupled with external dependencies (i.e. much of the code we would like to test). We can, however,
// still write unit tests for classes whose behavior is not driven by external dependencies, and ensure
// that their behavior is sound.

// #endregion mock data



// #region unit tests

// Test code goes here. Preferably, use scenario-driven language making use of the SCENARIO, GIVEN,
// WHEN, and THEN macros. (There will be cases where the more traditional TEST_CASE and SECTION macros
// are better suited to declaration of the public API.)

// #endregion unit tests



} // test namespace
