# This makefile wraps the Endless Sky SCons build instructions and supports the same targets
# and options it does, by simply passing them through to the SCons program. If you have Scons
# installed, this makefile will defer to your installed version. Otherwise, a local SCons package
# will be obtained from SourceForge and made available to the Endless Sky tooling.
#
# The MIT License (MIT)
#
# Copyright (c) 2015 Davide Kirchner
# Copyright (c) 2020 tehhowch
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.


# Build targets:
# 'release' - a 64-bit optimized (-O3 -march=native) version of Endless Sky for local consumption
# 'debug'   - a 64-bit version of Endless Sky with debugging symbols (-g)
# 'profile' - a 64-bit version of Endless Sky with debugging symbols and profiling hooks for gprof (-pg)
# 'clean'   - removes all compiled objects and binaries.
# 'clean-all' - runs clean, and also removes `scons-local`
# TODO 'dist' - a 64-bit general-release version of Endless Sky (non-specific architecture)

# Intended Usage:
# CAPS VARIABLE -> override via command line / environment, or modify here directly.
# lowercase variable -> should not need modification
#
#     avoid paths with spaces. (escape with \ if necessary)
#

# End-user configuration
# https://github.com/endless-sky/endless-sky/wiki/BuildInstructions
# 1. Obtain the 'dev64' zip archive from the Endless Sky wiki, unzip it, and
#    set DIR_ESLIB to its location
# 2. Set DIR_MINGW64 to the MinGW directory with a `bin` and `lib` subfolders
#    that has `libmingw32.a` and `libopengl32.a` in the lib subfolder
# 3. Set OUTPUT_DIR to where you want the exe to be placed (it will ship in a
#    config-dependent subfolder, e.g. OUTPUT_DIR\Debug\EndlessSky.exe)
# 4. Set BUILDDIR to where you would like the intermediate .o files to reside
# 5. Set SCONS_VERSION to the version of the SCons program you would like to use
#    if SCons is not found in PATH
# 6. Set PYTHON_BINARY to the name or path of a Python3 binary. Python v2 is not supported.
#
DIR_ESLIB ?= C:\dev64
DIR_MINGW64 ?= C:\Program\ Files\mingw64\x86_64-w64-mingw32
OUTPUT_DIR ?= bin
BUILDDIR ?= build
SCONS_VERSION ?= 4.0.1
PYTHON_BINARY ?= py

# Note: Several tools provided by MinGW & MSYS are required.
# 1. `cURL` - command-line HTTP client, used to download the `scons-local` package from SourceForge
# 2. `tar` - command-line compression client, used to unzip the downloaded `scons-local` package

#######
# Turn off all implicit rules, because we want scons to do all the work.
# Additional builtin rules can be disabled by passing -r on the invoking CLI
.SUFFIXES:

# TODOs:
# * pass down the CLI arguments, or map scons options into makefile targets with defined options
# * map above environment variables into scons format
# * parse $(MAKEFLAGS) / $(MAKECMDGOALS) into scons options (e.g. defer to input -j override, etc)?


# Invoke SCons, either the system / virtualenv installation or the downloaded version.
all release debug profile test: get_scons
	@$(scons_exe) -Q

.PHONY: all release debug profile test clean clean-all get_scons

needs_tarball ::= $(strip $(shell ls scons-local/scons.py 2>/dev/null || echo true))
ifeq ($(needs_tarball),true)
# Download / Unpack the tarball, and mark it as up-to-date (rather than inherit
# the date associated with when it was packaged by the SCons developers.)
scons-local-%.tar.gz:
	@echo "No system installation of SCons, downloading version $(SCONS_VERSION)"
	curl -sS -L http://sourceforge.net/projects/scons/files/scons-local/$(SCONS_VERSION)/$@ > $@
	@touch $@
scons-local: scons-local-$(SCONS_VERSION).tar.gz
	@echo "Unpacking tarball into $@"
	@mkdir -p $@
	@tar xzf $< --directory $@
	@touch $@
endif

# Conditional recipe that either invokes the system install, or triggers the download &
# use of `scons-local`
native_scons ::= $(strip $(shell which scons 2>/dev/null))
ifeq ($(native_scons),)
scons_exe = $(PYTHON_BINARY) ./scons-local/scons.py
get_scons: scons-local
	@echo "Using locally installed scons"
else
# (A system-installed SCons also implies that a python binary is located in the user's PATH.)
scons_exe ::= $(native_scons)
get_scons:
	@echo "Using system scons $(scons_exe)"
endif

clean:
	$(scons_exe) -c
clean-all: clean
	rm -rf scons-local
	rm -f scons-local-*.tar.gz
